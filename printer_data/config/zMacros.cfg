
#####################################################################
#   Macros
#####################################################################
[gcode_macro PRINT_START_VARS]
variable_tool: -1
gcode:

[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - PLEASE CUSTOMISE THE SCRIPT
gcode:


    {% set variable_EXTRUDER = params.EXTRUDER|default(230)|int %}  # Establece la temp. del extrusor o usa 230°C por defecto.
    {% set EXTRUDER = params.EXTRUDER|default(230)|int %}
    #M117 Preheating to {EXTRUDER}      
    M104 S{variable_EXTRUDER}   # Calienta el extrusor sin esperar.  
    #SET_HEATER_TEMPERATURE HEATER=extruder TARGET=variable_EXTRUDER
    G28                # Homing de todos los ejes.    
    Z_TILT_ADJUST      # Ajusta la inclinación del eje Z.    
    #G28 Z              # Homing solo del eje Z.    
    #BED_MESH_CLEAR     # Borra la malla de nivelación existente.    
    #BED_MESH_CALIBRATE ADAPTIVE=1 # Calibra la nueva malla de nivelación.    
    SMART_PARK        # Aparca el cabezal en una posición segura.    
    M109 S{EXTRUDER}  # Espera a que el extrusor alcance la temp.    
    VORON_PURGE       #Realiza la purga del extrusor.
    
[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script
gcode:
    #   Get Boundaries
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
    
    #   Check end position to determine safe directions to mov
    {% if printer.toolhead.position.z < (max_z - 2) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}
    
    #  Commence PRINT_END
    SAVE_GCODE_STATE NAME=STATE_PRINT_END

    M400                             ; wait for buffer to clear
    G92 E0                           ; zero the extruder
    G1 E-4.0 F3600                   ; retract
    G91                              ; relative positioning
    G0 Z{z_safe} F3600               ; move nozzle up
    G28 X Y    
    M104 S0                          ; turn off hotend
    M140 S0                          ; turn off bed
    M106 S0                          ; turn off fan
    G90                              ; absolute positioning
    # The purpose of the SAVE_GCODE_STATE/RESTORE_GCODE_STATE
    # command pair is to restore the printer's coordinate system
    # and speed settings since the commands above change them.
    # However, to prevent any accidental, unintentional toolhead
    # moves when restoring the state, explicitly set MOVE=0.
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0

    M117 Finished!

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    {% if printer.pause_resume.is_paused %}
    RESPOND MSG="Print is already paused"
    {% else %}
      {% set X = params.X|default(250) %} # edit to your park position
      {% set Y = params.Y|default(250) %} # edit to your park position
      {% set Z = params.Z|default(5) %} # edit to your park position
      {% set E = params.E|default(1) %} # edit to your retract length
      SAVE_GCODE_STATE NAME=PAUSE_state
      BASE_PAUSE
      G91
      G1 E-{E} F2100
      G1 Z{Z} F6000
      SAVE_GCODE_STATE NAME=PAUSE_above_state
      G90
      G1 X{X} Y{Y} F6000
      STATUS_READY
    {% endif %}



[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_prime: True
gcode:
    {% set E = params.E|default(1) %} # edit to your retract length
    {% if printer["gcode_macro PRINT_START_VARS"].tool == -1 %}
      G91
      G1 E{E} F2100
      G90
      {% if not printer["filament_switch_sensor toolhead_sensor"].filament_detected %}
        M117 No filament detected
      {% else %}
        RESTORE_GCODE_STATE NAME=PAUSE_above_state MOVE=1
        RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1
        BASE_RESUME
        STATUS_PRINTING
      {% endif %}
    {% else %}
      {% if printer["gcode_macro _ERCF_PAUSE"].is_paused|int != 0 %}
        M118 You cannot resume the print without unlocking the ERCF first.
        M118 Run ERCF_UNLOCK and solve any issue before hitting Resume again
      {% else %}
        RESTORE_GCODE_STATE NAME=PAUSE_above_state MOVE=1
        RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1
        G90
        {% if printer["gcode_macro _ERCF_VAR"].clog_detection|int == 1 %}
          SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1
        {% endif %}
        BASE_RESUME
        STATUS_PRINTING
      {% endif %}
    {% endif %}

    
[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    {% set E = params.E|default(1) %} # edit to your retract length
    TURN_OFF_HEATERS
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    G91
    G1 E-{E} F2100
    {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
    {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% if act_z < (max_z - 20.0) %}
      {% set z_safe = 20.0 %}
    {% else %}
      {% set z_safe = max_z - act_z %}
    {% endif %}
    G91
    G1 Z{z_safe} F900
    G90
    G0 X{x_park} Y{y_park} F6000
    STATUS_BUSY
    BASE_CANCEL_PRINT

[gcode_macro REMOVE_FILAMENT]
gcode:
    M117 Removing filament
  
    ERCF_FORM_TIP_STANDALONE USE_SKINNYDIP=1 SKINNYDIP_DISTANCE=31 COOLING_TUBE_LENGTH=20 COOLING_TUBE_RETRACTION=35
    G91
    G92 E0
    G1 E-90 F1000    
    M84 E
    

[gcode_macro INJECT_FILAMENT]
gcode:
    {% set E = params.E|default(10) %}
    M117 Injecting filament
    G91
    G1 E{E} F2100
    G90





## Use:
##   - DUMP_WARNINGS
[gcode_macro DUMP_WARNINGS]
description: Debug: Print all warning messages from klipper
gcode:
  {% if not printer.configfile.warnings %}
    {action_respond_info("klipper too old! Please update klipper first and run again")}
  {% else %}
    {% set parameters = ["printer.configfile.warnings:"] %}
    {% for warning in printer.configfile.warnings %}
      {% set parameters = parameters.append("%s -> %s -> %s\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}
    {% endfor %}
    {action_respond_info(parameters|join("\n"))}
  {% endif %}


[gcode_macro update_git]
gcode:
    {% set message = params.MESSAGE|default() %}
    {% if message %}
        RUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="'{params.MESSAGE}'"
    {% else %}
        RUN_SHELL_COMMAND CMD=update_git_script
    {% endif %}

[gcode_shell_command update_git_script]
command: bash -c "bash $HOME/klipper-backup/script.sh"
timeout: 90.0
verbose: True

[gcode_shell_command update_git_script_message]
command: bash -c "bash $HOME/klipper-backup/script.sh -c $0"
timeout: 90.0
verbose: True


